{"version":3,"sources":["Question/index.js","Option/index.js","ProgressBar/index.js","Quiz/index.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","style","fontSize","margin","questionText","Option","className","isSelected","isCorrectOption","onClick","optionClicked","id","active","text","ProgressBar","intervalId","state","width","color","countDown","this","setInterval","questionAnswered","clearInterval","handleOptionClickedQuestion","setState","background","React","Component","Quiz","score","selectedOption","hasAnswered","currentQuestionIndex","questions","handleOptionClicked","copyCurrentQuestionIndex","newScore","question","correct_choice","setTimeout","options","key","queIndex","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bdc2f752.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Question(props) {\r\n\r\n    return (\r\n        <div style={{fontSize: '48px', margin: '32px'}}>{props.questionText}</div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport './styles.css';\r\nimport Confetti from 'react-dom-confetti';\r\n\r\nexport default function Option(props) {\r\n    //const [isSelected, setSelected] = useState((false));\r\n\r\n    return (\r\n        <div\r\n            className={props.isSelected ? (props.isCorrectOption ? 'correct-option option' : 'wrong-option option') : 'option'}\r\n            onClick={() => props.optionClicked(props.id)}>\r\n            <Confetti active={ props.isCorrectOption && props.isSelected } />\r\n            {props.text}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n// onClick={() =>setSelected(!isSelected)}>","import React, {useEffect, useState} from \"react\";\r\nimport './style.css';\r\nimport props from \"../Quiz\";\r\n\r\n\r\nexport default class ProgressBar extends React.Component {\r\n    constructor() {\r\n        super(props);\r\n        this.intervalId = null;\r\n        this.state = {\r\n            width: 100,\r\n            color: \"green\",\r\n            text: \"GO\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let countDown = 100;\r\n        this.intervalId = setInterval(() => {\r\n            if (this.props.questionAnswered) {\r\n                clearInterval(this.intervalId)\r\n            }\r\n            if (countDown === 0) {\r\n                clearInterval(this.intervalId)\r\n                if (typeof this.props.handleOptionClickedQuestion === 'function') {\r\n                    this.props.handleOptionClickedQuestion();\r\n                }\r\n            }\r\n            if (countDown < 66) {\r\n                this.setState({color: \"yellow\"})\r\n                this.setState({text : \"Hurry Up\"})\r\n            }\r\n            if (countDown < 33) {\r\n                this.setState({color: \"red\"})\r\n                this.setState({text : \"\"})\r\n            }\r\n            countDown = countDown - 1;\r\n            this.setState({width: countDown})\r\n\r\n        }, 100)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"progressBar\"}>\r\n                <div className=\"progress\" style={{width: this.state.width + \"%\", background: this.state.color}}>\r\n                    {this.state.text}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport Question from \"../Question\";\r\nimport Option from \"../Option\";\r\nimport ProgressBar from \"../ProgressBar\";\r\nimport './styles.css';\r\n\r\n\r\nclass Quiz extends React.Component {\r\n    state = {\r\n        score: 0,\r\n        selectedOption: null,\r\n        hasAnswered : false,\r\n        currentQuestionIndex : 0\r\n\r\n    };\r\n\r\n    questions = [\r\n        {\r\n            'text': \"Who is current PM of India?\",\r\n            'options': ['Narendra Modi', 'Rahul Gandhi', 'Manmohan Singh', 'Sonia Gandhi'],\r\n            'correct_choice': 0\r\n        },\r\n        {\r\n            'text': \"What is capital of Orissa?\",\r\n            'options': ['Chandigarh', 'Bhubaneshwar', 'Tripura', 'Nagaland'],\r\n            'correct_choice': 1\r\n        },\r\n        {\r\n            'text': \"In the context to India's wild life, the flying fox is a __?\",\r\n            'options': ['Bat', 'Vulture', 'Stok', 'Kite'],\r\n            'correct_choice': 0\r\n        },\r\n        {\r\n            'text': 'What percentage of land area should remain covered by forest to maintain Ecological balance?',\r\n            'options': ['10%', '33%', '5%', 'None of these'],\r\n            'correct_choice': 1\r\n        },\r\n        {\r\n            'text': ' The purest form of iron is',\r\n            'options': ['Wrought iron', 'Steel', 'Pig iron', 'Nickel steel'],\r\n            'correct_choice': 0\r\n        },\r\n        {\r\n            'text': 'Layer of atmosphere in which Ozone layer lies is',\r\n            'options': ['Exosphere', 'Mesosphere', 'Troposphere', 'Stratosphere'],\r\n            'correct_choice': 3\r\n        },\r\n    ];\r\n\r\n\r\n\r\n    handleOptionClicked = (id) => {\r\n\r\n        if (!this.state.hasAnswered) {\r\n            let copyCurrentQuestionIndex = this.state.currentQuestionIndex;\r\n            copyCurrentQuestionIndex = copyCurrentQuestionIndex + 1;\r\n\r\n            let newScore = this.state.score;\r\n\r\n            if (id === this.question.correct_choice) {\r\n                newScore = newScore + 10;\r\n            }\r\n            this.setState({\r\n                selectedOption: id,\r\n                score: newScore,\r\n                questionAnswered: true,\r\n\r\n            });\r\n\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    selectedOption: null,\r\n                    questionAnswered: false,\r\n                    currentQuestionIndex : copyCurrentQuestionIndex,\r\n                });\r\n            }, 3000);\r\n        }\r\n    }\r\n\r\n    question;\r\n\r\n\r\n    render() {\r\n        // if (this.state.currentQuestionIndex < this.questions.length - 1)\r\n            this.question = this.questions[this.state.currentQuestionIndex];\r\n            //alert(`the index is ${this.state.currentQuestionIndex}`);\r\n\r\n        return (\r\n            <div className=\"header\">\r\n                <div className=\"score\">Score: {this.state.score}</div>\r\n                <Question questionText = {this.question.text}/>\r\n                <div className=\"options-container\">\r\n                    <Option text={this.question.options[0]} id = {0} isSelected={this.state.selectedOption === 0} isCorrectOption={this.question.correct_choice === 0}\r\n                            optionClicked={this.handleOptionClicked}/>\r\n                    <Option text={this.question.options[1]} id = {1} isSelected={this.state.selectedOption === 1} isCorrectOption={this.question.correct_choice === 1}\r\n                            optionClicked={this.handleOptionClicked}/>\r\n                    <Option text={this.question.options[2]} id = {2} isSelected={this.state.selectedOption === 2} isCorrectOption={this.question.correct_choice === 2}\r\n                            optionClicked={this.handleOptionClicked}/>\r\n                    <Option text={this.question.options[3]} id = {3} isSelected={this.state.selectedOption === 3} isCorrectOption={this.question.correct_choice === 3}\r\n                            optionClicked={this.handleOptionClicked}/>\r\n\r\n                </div>\r\n                <ProgressBar key={this.state.currentQuestionIndex} questionAnswered={this.state.questionAnswered} handleOptionClickedQuestion={() => this.handleOptionClicked()} queIndex={this.state.currentQuestionIndex}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Quiz;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Quiz from \"./Quiz\";\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Quiz/>\r\n        </header>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}